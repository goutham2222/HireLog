"use strict";const o=require("electron"),t=[];for(let n=0;n<256;++n)t.push((n+256).toString(16).slice(1));function p(n,e=0){return(t[n[e+0]]+t[n[e+1]]+t[n[e+2]]+t[n[e+3]]+"-"+t[n[e+4]]+t[n[e+5]]+"-"+t[n[e+6]]+t[n[e+7]]+"-"+t[n[e+8]]+t[n[e+9]]+"-"+t[n[e+10]]+t[n[e+11]]+t[n[e+12]]+t[n[e+13]]+t[n[e+14]]+t[n[e+15]]).toLowerCase()}let c;const r=new Uint8Array(16);function u(){if(!c){if(typeof crypto>"u"||!crypto.getRandomValues)throw new Error("crypto.getRandomValues() not supported. See https://github.com/uuidjs/uuid#getrandomvalues-not-supported");c=crypto.getRandomValues.bind(crypto)}return c(r)}const l=typeof crypto<"u"&&crypto.randomUUID&&crypto.randomUUID.bind(crypto),d={randomUUID:l};function a(n,e,g){if(d.randomUUID&&!n)return d.randomUUID();n=n||{};const i=n.random??n.rng?.()??u();if(i.length<16)throw new Error("Random bytes length must be >= 16");return i[6]=i[6]&15|64,i[8]=i[8]&63|128,p(i)}o.contextBridge.exposeInMainWorld("electronAPI",{getApplications:()=>o.ipcRenderer.invoke("get-applications"),addApplication:n=>{const e=a();return o.ipcRenderer.invoke("saveApplication",{id:e,...n})},updateApplication:(n,e)=>o.ipcRenderer.invoke("update-application",n,e),deleteApplication:n=>o.ipcRenderer.invoke("delete-application",n)});
